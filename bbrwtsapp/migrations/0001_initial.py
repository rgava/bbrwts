# Generated by Django 4.2.14 on 2024-11-21 13:09

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommodityListModel",
            fields=[
                (
                    "commodity",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "commodity_list",
            },
        ),
        migrations.CreateModel(
            name="CustomerListModel",
            fields=[
                (
                    "customer",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "customer_list",
            },
        ),
        migrations.CreateModel(
            name="LocationListModel",
            fields=[
                (
                    "code",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "location_list",
            },
        ),
        migrations.CreateModel(
            name="LocomotiveListModel",
            fields=[
                (
                    "locomotive",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("owner", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=100)),
                ("weight", models.FloatField()),
            ],
            options={
                "db_table": "locomotive_list",
            },
        ),
        migrations.CreateModel(
            name="LocomotiveModel",
            fields=[
                (
                    "locomotive",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("owner", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=100)),
                ("weight", models.FloatField()),
                ("train", models.CharField(default="Unattached", max_length=100)),
            ],
            options={
                "db_table": "locomotive",
            },
        ),
        migrations.CreateModel(
            name="LocomotiveTransactionsModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("locomotive", models.CharField(max_length=100)),
                ("owner", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=100)),
                ("weight", models.FloatField()),
                ("train", models.CharField(default="Unattached", max_length=100)),
                (
                    "locomotive_transaction_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
            options={
                "db_table": "locomotive_detailed_transactions",
            },
        ),
        migrations.CreateModel(
            name="ProjectsListModel",
            fields=[
                (
                    "projects",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
            ],
            options={
                "db_table": "projects_list",
            },
        ),
        migrations.CreateModel(
            name="TrainModel",
            fields=[
                (
                    "serial_number",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("train_number", models.CharField(max_length=100)),
                ("from_source", models.CharField(max_length=100)),
                ("to_destination", models.CharField(max_length=100)),
                ("departure_date", models.DateField()),
                ("departure_time", models.TimeField()),
                ("arrival_date", models.DateField(blank=True, null=True)),
                ("arrival_time", models.TimeField(blank=True, null=True)),
                ("status", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "db_table": "train",
                "ordering": [
                    "arrival_date",
                    "arrival_time",
                    "departure_date",
                    "departure_time",
                ],
            },
        ),
        migrations.CreateModel(
            name="TrainTransactionsModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("serial_number", models.CharField(max_length=100)),
                ("train_number", models.CharField(max_length=100)),
                ("from_source", models.CharField(max_length=100)),
                ("to_destination", models.CharField(max_length=100)),
                ("departure_date", models.DateField()),
                ("departure_time", models.TimeField()),
                ("arrival_date", models.DateField(blank=True, null=True)),
                ("arrival_time", models.TimeField(blank=True, null=True)),
                ("status", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "train_transaction_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "train_detailed_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WagonListModel",
            fields=[
                (
                    "wagon_id",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("symbol", models.CharField(max_length=100)),
                ("type", models.CharField(max_length=100)),
                ("owner", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "wagon_list",
            },
        ),
        migrations.CreateModel(
            name="WagonModel",
            fields=[
                (
                    "wagon_number",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                (
                    "container_1",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "container_2",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("commodity", models.CharField(max_length=100)),
                ("customer", models.CharField(max_length=100)),
                ("net", models.FloatField()),
                ("tare_weight", models.FloatField()),
                ("origin", models.CharField(max_length=100)),
                ("destination", models.CharField(max_length=100)),
                ("projects", models.CharField(max_length=100)),
                ("tarp_number", models.CharField(blank=True, max_length=100)),
                ("condition", models.CharField(max_length=100)),
                ("train", models.CharField(default="Unattached", max_length=100)),
            ],
            options={
                "db_table": "wagon",
            },
        ),
        migrations.CreateModel(
            name="WagonTransactionsModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("wagon_number", models.CharField(max_length=100)),
                (
                    "container_1",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "container_2",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("commodity", models.CharField(max_length=100)),
                ("customer", models.CharField(max_length=100)),
                ("net", models.FloatField()),
                ("tare_weight", models.FloatField()),
                ("origin", models.CharField(max_length=100)),
                ("destination", models.CharField(max_length=100)),
                ("projects", models.CharField(max_length=100)),
                ("train", models.CharField(default="Unattached", max_length=100)),
                (
                    "wagon_transaction_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
            ],
            options={
                "db_table": "wagon_detailed_transactions",
            },
        ),
        migrations.CreateModel(
            name="TrainImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="train_images/")),
                (
                    "train_serial",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="bbrwtsapp.trainmodel",
                    ),
                ),
            ],
            options={
                "db_table": "documents",
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "location_code",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="bbrwtsapp.locationlistmodel",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
